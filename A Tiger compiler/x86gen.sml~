signature CODEGEN =
sig
    structure Frame: FRAME
    val codegen: Frame.frame -> Tree.stm -> Assem.instr list
end

structure X86Gen: CODEGEN =
struct

structure Frame: FRAME = X86Frame
structure S = Symbol
structure T = Tree
structure Tm = Temp
structure A = Assem
structure F = Frame
structure PT = PrintTree(F)

exception TODO

fun int i =
    if i >= 0
    then Int.toString i
    else "-" ^ Int.toString (~i)

fun codegen frame stm =
    let
        val ilist = ref (nil: A.instr list)

        fun emit x = (ilist := x :: (!ilist))

        fun result gen =
            let val t = Tm.newtemp ()
            in  gen t; t
            end

        fun operator2jump oper =
            case oper of
                T.EQ => "je"
              | T.NE => "jne"
              | T.LT => "jl"
              | T.GT => "jg"
              | T.LE => "jle"
              | T.GE => "jge"
              | _ => "bad branch operator!"

        fun moveInstr s d doc = A.MOVE { assem = "\tmovl `s0, `d0"
                                       , src = s
                                       , dst = d
                                       , doc = "x86gen:" ^ doc}

        fun adjustSP count = A.OPER { assem = "\taddl $" ^ int count ^ ", `d0"
                                    , src = [F.SP] (* old-SP used *)
                                    , dst = [F.SP]
                                    , jump = NONE
                                    , doc = "x86gen:52"}

        fun allocArgs count = adjustSP (~F.wordSize*count)
        fun freeArgs count = adjustSP (F.wordSize*count)

        fun munchStm (T.SEQ (a, b)) = (munchStm a; munchStm b)

          (* MOVE *)
          | munchStm (T.MOVE (T.TEMP t, T.CALL (T.NAME l, args))) =
            ( emit (A.OPER { assem = "\tcall " ^ S.name l
                           , src = munchArgs args
                           , dst = F.calldefs
                           , jump = NONE
                           , doc = "x86gen:68"})
            ; emit (freeArgs (length args))
            ; emit (moveInstr F.EAX t "70"))

          | munchStm (T.MOVE (T.MEM e1, T.CALL (T.NAME l, args))) =
            let 
                val t = Tm.newtemp ()
            in  
                emit (A.OPER { assem = "\tcall " ^ S.name l
                             , src = munchArgs args
                             , dst = F.calldefs
                             , jump = NONE
                             , doc = "x86gen:80"});
                 print "gen 1 \n";
                    emit (A.OPER {
			       assem = "\tmovl `s0, t"
			     , src = [munchExp e1]
			     , dst = []
			     , jump = NONE
			     , doc = "x86gen:86"})
		    ; emit (freeArgs (length args))
		    ; emit (moveInstr F.EAX t "88")
            end

          | munchStm (T.MOVE (T.MEM (T.BINOP (T.PLUS, e1, T.CONST i)), e2)) =
            (print "gen 2 \n";
                    emit (A.OPER {
			       assem = "\tmovl `s0, " ^ int i ^ "(`s1)"
			     , dst = []
			     , src = [munchExp e1, munchExp e2]
			     , jump = NONE
			     , doc = "x86gen:gen98"}))

          | munchStm (T.MOVE (T.MEM (T.BINOP (T.PLUS, T.CONST i, e1)), e2)) =
            (print "gen 3 \n";
             emit (A.OPER {
			assem = "\tmovl `s0, " ^ int i ^ "(`s1)"
		      , dst = []
		      , src = [munchExp e1, munchExp e2]
		      , jump = NONE
		      , doc = "x86gen:gen3"}))

          | munchStm (T.MOVE (T.MEM (T.CONST i), e2)) =
            (print "gen 4 \n";
                    emit (A.OPER {
			       assem = "\tmovl `s0, " ^ int i ^ "r0" (*Denne er ikke rigtig, r0???*)
			     , dst = []
			     , src = [munchExp e2]
			     , jump = NONE
			     , doc = "x86gen: gen4"}))

          | munchStm (T.MOVE (T.MEM e1, e2)) =
            (print "gen 5 \n";
	     emit (moveInstr (munchExp e1) (munchExp e2) "121")) (*Skal vi køre munch på e1?*)

          | munchStm (T.MOVE (T.TEMP i, e2)) = (*e*)
            (print "gen 6 \n";
                    emit (moveInstr (munchExp e2) i "125"))

          | munchStm (T.LABEL lab) =(*e*)
            (print "gen 7 \n";
                    emit (A.LABEL{
			   assem = (S.name lab) ^ ":"
			 , lab = lab
			 , doc = "x86gen: 132"}))

          (* JUMP *)
          | munchStm (T.CJUMP (oper, T.CONST i, e2, lab1, lab2)) =
            (print "gen 8 \n";
	     emit ( A.OPER { (*Skal denne være her, eller er det sket i forvejen?*)
			  assem = "\tcmp $" ^ int i ^ ", `s0" 
			, dst = []
			, src = [munchExp e2]
			, jump = NONE
			, doc = "x86gen:142"}
		    ; A.OPER {
			  assem = "\t " ^ (operator2jump oper) ^ "`j0 \n \tjmp `j1"
			, dst = []
			, src = []
			, jump = SOME[lab1, lab2]
			, doc = "x86gen:148"}))
		  
          | munchStm (T.CJUMP (oper, e1, T.CONST i, lab1, lab2)) =
           (print "gen 9 \n";
            emit ( A.OPER { (*Skal denne være her, eller er det sket i forvejen?*)
			 assem = "\tcmp $" ^ int i ^ ", `s0" 
		       , dst = []
		       , src = [munchExp e1]
		       , jump = NONE
		       , doc = "x86gen:157"}
		   ; A.OPER {
			 assem = "\t " ^ (operator2jump oper) ^ "`j0 \n \tjmp `j1"
		       , dst = []
		       , src = []
		       , jump = SOME[lab1, lab2]
		       , doc = "x86gen:163"}))
		 
          | munchStm (T.CJUMP (oper, e1, e2, lab1, lab2)) =
            (print "gen 10 \n";
             emit ( A.OPER { (*Skal denne være her, eller er det sket i forvejen?*)
			  assem = "\tcmp `s0, `s1" 
			, dst = []
			, src = [munchExp e1, munchExp e2]
			, jump = NONE
			, doc = "x86gen:172"}
		    ; A.OPER {
			  assem = "\t " ^ (operator2jump oper) ^ "`j0 \n \tjmp `j1"
			, dst = []
			, src = []
			, jump = SOME[lab1, lab2]
			, doc = "x86gen:178"}))

          | munchStm (T.JUMP (T.NAME lab, llst)) = (*e, måske - llst??*)
            (print "gen 11 \n";
                    emit (A.OPER {
			       assem = "\tjmp " ^ (S.name lab)
			     , dst = []
			     , src = []
			     (* You jump to the label in the assembler code *)
			     , jump = SOME[Temp.namedLabel(S.name lab)]
			     , doc = "x86gen:JUMP"}))

          (* EXP *)
          | munchStm (T.EXP (T.CALL (T.NAME lab, args))) =
           (print "gen 12 \n";
                    raise TODO)
            
          | munchStm (T.EXP exp) =
            (print "gen 13 \n";
                    munchExp exp; 
		    ())

          (* If no match so far, complain *)
          | munchStm (T.JUMP a) =
            emit (A.OPER { assem = "\t# JUMP: bad JUMP in munchStm!"
                         , src = []
                         , dst = []
                         , jump = NONE
                         , doc = "x86gen:127"})

          | munchStm (T.MOVE a) =
            emit (A.MOVE { assem = "\t# MOVE: bad MOVE in munchStm!"
                         , src = Tm.newtemp ()
                         , dst = Tm.newtemp ()
                         , doc = "x86gen:133"})

        and munchArgs args =
            (* in the simple approach used here, we pass all args in memory *)
            let val rargs = rev args (* push args right-to-left *)
                fun munchArgs1 [] = []
                  | munchArgs1 (ah::at) = (print "gen 14 \n";
                    raise TODO)
            in  munchArgs1 rargs
            end

        (* Memory access *)
        and munchExp (T.MEM (T.BINOP (T.PLUS, e, T.CONST n))) =
            result (fn r => emit (A.OPER { assem = "\tmovl " ^ int n ^
                                                   "(`s0), `d0"
                                         , src = [munchExp e]
                                         , dst = [r]
                                         , jump = NONE
                                         , doc = "x86gen:151"}))

          | munchExp (T.MEM (T.BINOP (T.PLUS, T.CONST n, e))) = (*e*)
            result (fn r => (print "gen 15 \n";
			     emit (A.OPER {
			       assem = "\tmovl $" ^ int n ^ "(`s0), `d0"
			      , dst = [r]
			      , src = [munchExp e]
			      , jump = NONE
			      , doc = "x86gen: 204"})))
		   
          | munchExp (T.MEM (T.BINOP (T.MINUS, e, T.CONST n))) =
            result (fn r =>(print "gen 16 \n";
			    emit (A.OPER {
				       assem = "LOAD 'd0 <- M[s0 + " ^ int (~n) ^ "] \n"
				     , dst = [r]
				     , src = [munchExp e]
				     , jump = NONE
				     , doc = "x86gen: gen16"})))
		   
          | munchExp (T.MEM e) =
            result (fn r => (print "gen 17 \n";
                             emit (A.OPER {
					assem = "LOAD 'd0 <- M[s0 + 0] \n"
				      , dst = [r]
				      , src = [munchExp e]
				      , jump = NONE
				      , doc = "x86gen: MEME"})))

	  (* PLUS *)
	  | munchExp (T.BINOP (T.PLUS, e1, T.CONST i)) =
            result (fn r => (print "gen 18 \n";
			     (emit (moveInstr (munchExp e1) r "235")); 
			     emit (A.OPER {
					assem = "\taddl $" ^ int i ^ ",  `d0"
				      , dst = [r]
				      , src = [r]
				      , jump = NONE
				      , doc = "x86gen: e1+i"})))

          | munchExp (T.BINOP (T.PLUS, T.CONST i, e1)) =
            result (fn r => (print "gen 19 \n";
                             emit (A.OPER {
					assem = "\taddl $" ^ int i ^ ", `s0"
				      , dst = [r]
				      , src = [munchExp e1]
				      , jump = NONE
				      , doc = "x86gen: PLUSconstE1"})))
		   
          | munchExp (T.BINOP (T.PLUS, e1, e2)) =
            (* Hint, p203: use src=[r,_] and do not use `s0,
             * which specifies that r is used *)
            result (fn r => (print "gen 20 \n";
                             emit (A.OPER {
					assem = "ADD 'd0 <- 's0 + 's1 \n"
				      , dst = [r]
				      , src = [munchExp e1, munchExp e2]
				      , jump = NONE
				      , doc = "x86gen: PLUSe1e2"})))
		   
          (* MINUS *)
          | munchExp (T.BINOP (T.MINUS, e1, T.CONST i)) =
            result (fn r => (print "gen 21 \n";
                   (emit (moveInstr (munchExp e1) r "266")); 
			     emit (A.OPER {
					assem = "\tsubl $" ^ int i ^ ",  `d0"
				      , dst = [r]
				      , src = [r]
				      , jump = NONE
				      , doc = "x86gen: e1-i"})))

          | munchExp (T.BINOP (T.MINUS, T.CONST 0, e1)) =
            result (fn r => (print "gen 22 \n";
                    raise TODO))

          | munchExp (T.BINOP (T.MINUS, T.CONST i, e1)) =
            result (fn r =>(print "gen 23 \n";
                    raise TODO))

          | munchExp (T.BINOP (T.MINUS, e1, e2)) =
            result (fn r => (print "gen 24 \n";
                    raise TODO))

          (* MULTIPLY *)
          | munchExp (T.BINOP (T.MUL, e1, e2)) =
            result (fn r => (print "gen 25 \n";
                    raise TODO))

          (* DIVIDE *)

          | munchExp (T.BINOP (T.DIV, e1, e2)) =
            (* Hint from
             * http://www.cs.mun.ca/~rod/winter2004/cs3724/notes/asm.html:
             *
             * "To divide x by y, we first convert it into 64-bits, and
             * them use idivl.
             *
             *  movl  x, %eax
             *  cltd
             *  idivl y
             *
             * The quotient is in %eax, and the remainder is in %edx."
             *)
            result (fn r => (print "gen 26 \n";
                    raise TODO))

          (* AND *)
          | munchExp (T.BINOP (T.AND, e1, T.CONST i)) =
            result (fn r => (print "gen 27 \n";
                    raise TODO))

          | munchExp (T.BINOP (T.AND, T.CONST i, e1)) =
            result (fn r =>  (print "gen 28 \n";
                    raise TODO))

          | munchExp (T.BINOP (T.AND, e1, e2)) =
            result (fn r => (print "gen 29 \n";
                    raise TODO))

          (* OR *)
          | munchExp (T.BINOP (T.OR, e1, T.CONST i)) =
            result (fn r => (print "gen 30 \n";
                    raise TODO))

          | munchExp (T.BINOP (T.OR, T.CONST i, e1)) =
            result (fn r => (print "gen 31 \n";
                    raise TODO))

          | munchExp (T.BINOP (T.OR, e1, e2)) =
            result (fn r => (print "gen 32 \n";
                    raise TODO))

          (* Other constructs *)
          | munchExp (T.TEMP t) = t

          | munchExp (T.ESEQ (s, e)) = (print "gen 33 \n";
                    raise TODO)

          | munchExp (T.NAME label) =
            result (fn r => (print "gen 34 \n";
                    raise TODO))

          | munchExp (T.CONST n) =
            result (fn r => (print "gen 35 \n";
                    emit (A.OPER {
			       assem = "\tpushl $" ^ int n 
			     , dst = []
			     , src = []
			     , jump = NONE
			     , doc = "x86gen: expConst"})))

          (* If no match so far, complain *)
          | munchExp (tr as T.CALL (_, _)) =
            ( TextIO.output (TextIO.stdErr, "\nBUG: bad CALL in munchExp:\n")
            ; PT.printExp (TextIO.stdErr, tr)
            ; TextIO.flushOut TextIO.stdErr
            ; result (fn _ => emit (A.OPER { assem = "\t# bad CALL!"
                                           , src = []
                                           , dst = []
                                           , jump = NONE
                                           , doc = "x86gen:248"})))

          | munchExp (tr as T.BINOP (_, _, _)) =
            ( TextIO.output (TextIO.stdErr, "\nBUG: bad BINOP in munchExp:\n")
            ; PT.printExp (TextIO.stdErr, tr)
            ; TextIO.flushOut TextIO.stdErr
            ; result (fn _ => emit (A.OPER { assem = "\t# bad BINOP!"
                                           , src = []
                                           , dst = []
                                           , jump = NONE
                                           , doc = "x86gen:258"})))
    in
        munchStm stm;
        rev (!ilist)
    end

end (* X86Gen *)

